# Generated by Django 5.1.7 on 2025-10-01 13:34

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('treatments', '0006_alter_medicalhistory_condition_name_and_more'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='VitalSign',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('systolic_bp', models.PositiveIntegerField(help_text='Normal: 90-120 mmHg', validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(300)], verbose_name='Systolic Blood Pressure (mmHg)')),
                ('diastolic_bp', models.PositiveIntegerField(help_text='Normal: 60-80 mmHg', validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(200)], verbose_name='Diastolic Blood Pressure (mmHg)')),
                ('heart_rate', models.PositiveIntegerField(help_text='Normal: 60-100 bpm', validators=[django.core.validators.MinValueValidator(30), django.core.validators.MaxValueValidator(250)], verbose_name='Heart Rate (bpm)')),
                ('temperature', models.DecimalField(blank=True, decimal_places=1, help_text='Normal: 36.1-37.2°C', max_digits=4, null=True, validators=[django.core.validators.MinValueValidator(Decimal('30.0')), django.core.validators.MaxValueValidator(Decimal('45.0'))], verbose_name='Body Temperature (°C)')),
                ('respiratory_rate', models.PositiveIntegerField(blank=True, help_text='Normal: 12-20 breaths/min', null=True, validators=[django.core.validators.MinValueValidator(8), django.core.validators.MaxValueValidator(60)], verbose_name='Respiratory Rate (breaths/min)')),
                ('oxygen_saturation', models.PositiveIntegerField(blank=True, help_text='Normal: 95-100%', null=True, validators=[django.core.validators.MinValueValidator(70), django.core.validators.MaxValueValidator(100)], verbose_name='Oxygen Saturation (%)')),
                ('weight', models.DecimalField(blank=True, decimal_places=1, max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(Decimal('20.0')), django.core.validators.MaxValueValidator(Decimal('500.0'))], verbose_name='Weight (kg)')),
                ('height', models.PositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(250)], verbose_name='Height (cm)')),
                ('cholesterol_total', models.PositiveIntegerField(blank=True, help_text='Normal: <200 mg/dL', null=True, validators=[django.core.validators.MinValueValidator(100), django.core.validators.MaxValueValidator(500)], verbose_name='Total Cholesterol (mg/dL)')),
                ('cholesterol_ldl', models.PositiveIntegerField(blank=True, help_text='Normal: <100 mg/dL', null=True, validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(300)], verbose_name='LDL Cholesterol (mg/dL)')),
                ('cholesterol_hdl', models.PositiveIntegerField(blank=True, help_text='Normal: >40 mg/dL (men), >50 mg/dL (women)', null=True, validators=[django.core.validators.MinValueValidator(20), django.core.validators.MaxValueValidator(150)], verbose_name='HDL Cholesterol (mg/dL)')),
                ('blood_glucose', models.PositiveIntegerField(blank=True, help_text='Normal fasting: 70-100 mg/dL', null=True, validators=[django.core.validators.MinValueValidator(50), django.core.validators.MaxValueValidator(500)], verbose_name='Blood Glucose (mg/dL)')),
                ('cardiovascular_risk_score', models.DecimalField(blank=True, decimal_places=2, help_text='10-year cardiovascular risk percentage', max_digits=5, null=True, verbose_name='Cardiovascular Risk Score (%)')),
                ('overall_risk_level', models.CharField(choices=[('low', 'Low Risk'), ('normal', 'Normal'), ('elevated', 'Elevated'), ('high', 'High Risk'), ('critical', 'Critical')], default='normal', max_length=20, verbose_name='Overall Risk Level')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Clinical Notes')),
                ('measurement_context', models.CharField(blank=True, help_text='e.g., "After exercise", "Morning reading", "Post-medication"', max_length=100, null=True, verbose_name='Measurement Context')),
                ('recorded_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='Recorded At')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('patient', models.ForeignKey(limit_choices_to={'user_type': 'patient'}, on_delete=django.db.models.deletion.CASCADE, related_name='vital_signs', to=settings.AUTH_USER_MODEL, verbose_name='Patient')),
                ('recorded_by', models.ForeignKey(blank=True, limit_choices_to={'user_type__in': ['doctor', 'admin']}, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='recorded_vitals', to=settings.AUTH_USER_MODEL, verbose_name='Recorded By')),
            ],
            options={
                'verbose_name': 'Vital Sign Record',
                'verbose_name_plural': 'Vital Sign Records',
                'ordering': ['-recorded_at'],
            },
        ),
        migrations.CreateModel(
            name='VitalSignAlert',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('alert_type', models.CharField(choices=[('high_bp', 'High Blood Pressure'), ('low_bp', 'Low Blood Pressure'), ('high_hr', 'High Heart Rate'), ('low_hr', 'Low Heart Rate'), ('high_temp', 'High Temperature'), ('low_temp', 'Low Temperature'), ('low_o2', 'Low Oxygen Saturation'), ('critical_vitals', 'Critical Vitals'), ('cardiovascular_risk', 'High Cardiovascular Risk')], max_length=30, verbose_name='Alert Type')),
                ('severity', models.CharField(choices=[('low', 'Low Risk'), ('normal', 'Normal'), ('elevated', 'Elevated'), ('high', 'High Risk'), ('critical', 'Critical')], max_length=20, verbose_name='Severity')),
                ('message', models.TextField(verbose_name='Alert Message')),
                ('status', models.CharField(choices=[('active', 'Active'), ('acknowledged', 'Acknowledged'), ('resolved', 'Resolved')], default='active', max_length=20, verbose_name='Status')),
                ('acknowledged_at', models.DateTimeField(blank=True, null=True, verbose_name='Acknowledged At')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('acknowledged_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='acknowledged_vital_alerts', to=settings.AUTH_USER_MODEL, verbose_name='Acknowledged By')),
                ('notified_users', models.ManyToManyField(blank=True, related_name='received_vital_alerts', to=settings.AUTH_USER_MODEL, verbose_name='Notified Users')),
                ('vital_sign', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='alerts', to='treatments.vitalsign', verbose_name='Vital Sign Record')),
            ],
            options={
                'verbose_name': 'Vital Sign Alert',
                'verbose_name_plural': 'Vital Sign Alerts',
                'ordering': ['-created_at'],
            },
        ),
        migrations.AddIndex(
            model_name='vitalsign',
            index=models.Index(fields=['patient', '-recorded_at'], name='treatments__patient_731136_idx'),
        ),
        migrations.AddIndex(
            model_name='vitalsign',
            index=models.Index(fields=['overall_risk_level'], name='treatments__overall_d35905_idx'),
        ),
        migrations.AddIndex(
            model_name='vitalsign',
            index=models.Index(fields=['recorded_at'], name='treatments__recorde_fa95f6_idx'),
        ),
        migrations.AddIndex(
            model_name='vitalsignalert',
            index=models.Index(fields=['status', '-created_at'], name='treatments__status_857e54_idx'),
        ),
        migrations.AddIndex(
            model_name='vitalsignalert',
            index=models.Index(fields=['severity'], name='treatments__severit_6b6257_idx'),
        ),
    ]
