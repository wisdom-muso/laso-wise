"""
Django settings for laso project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from decouple import config, Csv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config('SECRET_KEY', default='django-insecure-$87@n^(g6isfhz4rt7uxv-yx1khpu&c+t(n_svs7y7u9u)49r)')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config('DEBUG', default=True, cast=bool)

# Production security settings
if not DEBUG:
    SECURE_BROWSER_XSS_FILTER = True
    SECURE_CONTENT_TYPE_NOSNIFF = True
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    SECURE_HSTS_SECONDS = 31536000
    SECURE_SSL_REDIRECT = True
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True
    X_FRAME_OPTIONS = 'DENY'
    SECURE_REFERRER_POLICY = 'strict-origin-when-cross-origin'

ALLOWED_HOSTS = config('ALLOWED_HOSTS', default='localhost,127.0.0.1,65.108.91.110,host.docker.internal,*', cast=Csv())

# CSRF trusted origins for secure forms
CSRF_TRUSTED_ORIGINS = [
    'https://work-1-fwwedwqyyluorgsx.prod-runtime.all-hands.dev',
    'https://work-2-fwwedwqyyluorgsx.prod-runtime.all-hands.dev',
    'https://work-1-piihhelknqfzruzd.prod-runtime.all-hands.dev',
    'https://work-2-piihhelknqfzruzd.prod-runtime.all-hands.dev',
    'https://work-1-rbqmuuwwxbalnjhs.prod-runtime.all-hands.dev',
    'https://work-2-rbqmuuwwxbalnjhs.prod-runtime.all-hands.dev',
    'https://work-1-oaiiljcdqikvohfq.prod-runtime.all-hands.dev',
    'https://work-2-oaiiljcdqikvohfq.prod-runtime.all-hands.dev',
    'https://work-1-rpqxmrerpfzteyap.prod-runtime.all-hands.dev',
    'https://work-2-rpqxmrerpfzteyap.prod-runtime.all-hands.dev',
    'https://work-1-zpgsapvljvomliot.prod-runtime.all-hands.dev',
    'https://work-2-zpgsapvljvomliot.prod-runtime.all-hands.dev',
    'https://work-1-kbfmamisweqyqrai.prod-runtime.all-hands.dev',
    'https://work-2-kbfmamisweqyqrai.prod-runtime.all-hands.dev',
    'https://work-1-pztsgirxskmwfrus.prod-runtime.all-hands.dev',
    'https://work-2-pztsgirxskmwfrus.prod-runtime.all-hands.dev',
    'http://localhost:12000',
    'http://localhost:12001',
    'http://127.0.0.1:12000',
    'http://127.0.0.1:12001',
    'http://65.108.91.110',
    'https://65.108.91.110',
    'https://work-1-bcyndhgpdochzfjf.prod-runtime.all-hands.dev',
    'https://work-2-bcyndhgpdochzfjf.prod-runtime.all-hands.dev',
]

# Application definition

INSTALLED_APPS = [
    'unfold',  # Django Unfold admin theme
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.humanize',  # Add humanize for template filters
    # Third party apps
    'rest_framework',
    'rest_framework.authtoken',
    'corsheaders',
    'django_celery_beat',  # Celery Beat scheduler
    'channels',  # WebSocket support for real-time communication
    # Our applications
    'users',
    'appointments',
    'treatments',
    'core',
    'telemedicine',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'laso.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'Templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'core.context_processors.notifications_processor',
                'core.context_processors.theme_processor',
            ],
        },
    },
]

WSGI_APPLICATION = 'laso.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

# Explicit toggle to force SQLite even if DATABASE_URL is present
USE_SQLITE = config('USE_SQLITE', default=False, cast=bool)

# Check if we have a DATABASE_URL environment variable (for Docker/production)
DATABASE_URL = config('DATABASE_URL', default=None)

if not USE_SQLITE and DATABASE_URL:
    # Production/Docker database configuration
    import dj_database_url
    DATABASES = {
        'default': dj_database_url.parse(DATABASE_URL)
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# WhiteNoise configuration for static files - Enhanced for production stability
# For Django 4.2+ use STORAGES setting, fall back to STATICFILES_STORAGE for older versions
STORAGES = {
    'default': {
        'BACKEND': 'django.core.files.storage.FileSystemStorage',
    },
    'staticfiles': {
        'BACKEND': 'whitenoise.storage.StaticFilesStorage',
    },
}

# Fallback for older Django versions  
STATICFILES_STORAGE = 'whitenoise.storage.StaticFilesStorage'

# WhiteNoise settings - Enhanced for production
WHITENOISE_USE_FINDERS = True
WHITENOISE_AUTOREFRESH = DEBUG
WHITENOISE_SKIP_COMPRESS_EXTENSIONS = ['jpg', 'jpeg', 'png', 'gif', 'webp', 'zip', 'gz', 'tgz', 'bz2', 'tbz', 'xz', 'br', 'map']
WHITENOISE_MAX_AGE = 31536000  # 1 year

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Custom user model
AUTH_USER_MODEL = 'users.User'

# Login/logout settings
LOGIN_REDIRECT_URL = 'dashboard'
LOGOUT_REDIRECT_URL = 'login'
LOGIN_URL = 'login'

# Admin login redirect fix
ADMIN_REDIRECT_URL = '/admin/'

# Custom admin login URL
ADMIN_LOGIN_URL = '/admin/login/'

# Email settings (console backend for development)
EMAIL_BACKEND = config('EMAIL_BACKEND', default='django.core.mail.backends.console.EmailBackend')

# Email configuration for production
if EMAIL_BACKEND == 'django.core.mail.backends.smtp.EmailBackend':
    EMAIL_HOST = config('EMAIL_HOST', default='smtp.gmail.com')
    EMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)
    EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)
    EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
    EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')

# Unfold Admin Theme Settings
UNFOLD = {
    "SITE_TITLE": "Laso Healthcare Admin",
    "SITE_HEADER": "Laso Healthcare - Clinical Management System",
    "SITE_URL": "/",
    "SITE_ICON": None,
    "DASHBOARD_CALLBACK": "core.admin_dashboard.admin_dashboard_callback",
    "STYLES": [
        "css/admin_custom.css",
        "css/sidebar_teal.css",
        "css/teal_theme_override.css",
    ],
    "SCRIPTS": [],
    "SIDEBAR": {
        "show_search": True,
        "show_all_applications": True,
        "navigation": [
            {
                "title": "Patient Management",
                "separator": True,
                "items": [
                    {
                        "title": "Patients",
                        "icon": "people",
                        "link": "/admin/users/user/?user_type__exact=patient",
                    },
                    {
                        "title": "Medical History",
                        "icon": "assignment",
                        "link": "/admin/core/medicalhistory/",
                    },
                ]
            },
            {
                "title": "Clinical Operations",
                "separator": True,
                "items": [
                    {
                        "title": "Appointments",
                        "icon": "event",
                        "link": "/admin/appointments/appointment/",
                    },
                    {
                        "title": "Treatments",
                        "icon": "local_hospital",
                        "link": "/admin/treatments/treatment/",
                    },
                    {
                        "title": "Medications",
                        "icon": "medication",
                        "link": "/admin/treatments/medication/",
                    },
                ]
            },
            {
                "title": "Medical Records",
                "separator": True,
                "items": [
                    {
                        "title": "Lab Tests",
                        "icon": "science",
                        "link": "/admin/treatments/labtest/",
                    },
                    {
                        "title": "Medical Images",
                        "icon": "image",
                        "link": "/admin/treatments/medicalimage/",
                    },
                    {
                        "title": "Reports",
                        "icon": "description",
                        "link": "/admin/treatments/report/",
                    },
                ]
            },
        ]
    },
    "TABS": [
        {
            "models": [
                "users.user",
                "core.medicalhistory",
            ],
            "items": [
                {
                    "title": "Patients",
                    "link": "/admin/users/user/?user_type__exact=patient",
                },
                {
                    "title": "Doctors",
                    "link": "/admin/users/user/?user_type__exact=doctor",
                },
            ]
        },
    ],
    "EXTENSIONS": {
        "modeltranslation": {
            "flags": {
                "en": "🇺🇸",
                "tr": "🇹🇷",
            },
        },
    },
    "COLORMODE": {
        "default": "light",
        "toggle": True,
    },
    "COLORS": {
        "primary": {
            "50": "#f0fdfa",
            "100": "#ccfbf1", 
            "200": "#99f6e4",
            "300": "#5eead4",
            "400": "#2dd4bf",
            "500": "#14b8a6",
            "600": "#0d9488",
            "700": "#0f766e", 
            "800": "#115e59",
            "900": "#134e4a",
            "950": "#042f2e"
        }
    }
}

# REST Framework Settings
REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'DEFAULT_RENDERER_CLASSES': [
        'rest_framework.renderers.JSONRenderer',
    ],
}

# CORS Settings for Mobile API
CORS_ALLOW_ALL_ORIGINS = True  # Only for development
CORS_ALLOW_CREDENTIALS = True
CORS_ALLOWED_ORIGINS = [
    "http://localhost:3000",
    "http://127.0.0.1:3000",
    "http://localhost:8080",
    "http://127.0.0.1:8080",
]

# Internationalization Settings
LANGUAGES = [
    ('en', 'English'),
    ('tr', 'Turkish'),
    ('ar', 'العربية'),
    ('de', 'Deutsch'),
    ('fr', 'Français'),
]

LOCALE_PATHS = [
    BASE_DIR / 'locale',
]

USE_L10N = True

# Telemedicine Settings
TELEMEDICINE_SETTINGS = {
    'MAX_SESSION_DURATION': 120,  # minutes
    'DEFAULT_SESSION_DURATION': 30,  # minutes
    'WEBRTC_STUN_SERVERS': [
        'stun:stun.l.google.com:19302',
        'stun:stun1.l.google.com:19302',
    ],
    'RECORDING_ENABLED': True,
    'RECORDING_PATH': MEDIA_ROOT + '/recordings/',
    'AUTO_END_SESSION_AFTER': 150,  # minutes
}

# AI/ML Settings
AI_SETTINGS = {
    'ENABLE_AI_FEATURES': True,
    'SYMPTOM_ANALYSIS_ENABLED': True,
    'DRUG_INTERACTION_CHECK': True,
    'HEALTH_RISK_ASSESSMENT': True,
    'ML_MODEL_PATH': BASE_DIR / 'ai_models/',
    'OPENAI_API_KEY': os.getenv('OPENAI_API_KEY', ''),
    'HUGGINGFACE_API_KEY': os.getenv('HUGGINGFACE_API_KEY', ''),
}

# Analytics Settings
ANALYTICS_SETTINGS = {
    'ENABLE_ANALYTICS': True,
    'DATA_RETENTION_DAYS': 365,
    'REAL_TIME_UPDATES': True,
    'EXPORT_FORMATS': ['pdf', 'excel', 'csv'],
}

# Notification Settings
NOTIFICATION_SETTINGS = {
    'EMAIL_NOTIFICATIONS': True,
    'SMS_NOTIFICATIONS': False,  # Requires SMS service setup
    'PUSH_NOTIFICATIONS': True,
    'REAL_TIME_NOTIFICATIONS': True,
    'NOTIFICATION_RETENTION_DAYS': 30,
}

# Security Settings for Production
SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = 'DENY'

# Cache Settings (Redis optional)
REDIS_URL = config('REDIS_URL', default=None)

if REDIS_URL:
    try:
        # Only configure django-redis if the package is installed
        import django_redis  # noqa: F401
        CACHES = {
            'default': {
                'BACKEND': 'django_redis.cache.RedisCache',
                'LOCATION': REDIS_URL,
                'OPTIONS': {
                    'CLIENT_CLASS': 'django_redis.client.DefaultClient',
                }
            }
        }
        SESSION_ENGINE = 'django.contrib.sessions.backends.cache'
        SESSION_CACHE_ALIAS = 'default'
    except Exception:
        # Fallback to local memory cache if django-redis isn't available
        CACHES = {
            'default': {
                'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
                'LOCATION': 'unique-snowflake',
            }
        }
else:
    CACHES = {
        'default': {
            'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
            'LOCATION': 'unique-snowflake',
        }
    }

# Celery Configuration (only if Redis is available)
if REDIS_URL:
    CELERY_BROKER_URL = REDIS_URL
    CELERY_RESULT_BACKEND = REDIS_URL
    CELERY_ACCEPT_CONTENT = ['json']
    CELERY_TASK_SERIALIZER = 'json'
    CELERY_RESULT_SERIALIZER = 'json'
    CELERY_TIMEZONE = TIME_ZONE
    CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'
    
    # Enhanced Celery Beat configuration for stability
    CELERY_BEAT_SCHEDULE_FILENAME = '/tmp/celerybeat-schedule'
    CELERY_WORKER_HIJACK_ROOT_LOGGER = False
    CELERY_WORKER_LOG_FORMAT = '[%(asctime)s: %(levelname)s/%(processName)s] %(message)s'
    CELERY_WORKER_TASK_LOG_FORMAT = '[%(asctime)s: %(levelname)s/%(processName)s][%(task_name)s(%(task_id)s)] %(message)s'
    
    # Database connection settings for Celery
    CELERY_DATABASE_ENGINE_OPTIONS = {
        'isolation_level': None,
        'pool_pre_ping': True,
        'pool_recycle': 300,
    }

LOG_TO_FILE = config('LOG_TO_FILE', default=False, cast=bool)

# Logging Settings
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
        },
        # 'file' handler is added below only if enabled
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'telemedicine': {
            'handlers': ['console'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'core.ai_features': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}

# Production-specific settings
if not DEBUG:
    # Security settings for production
    SECURE_SSL_REDIRECT = config('SECURE_SSL_REDIRECT', default=False, cast=bool)
    SESSION_COOKIE_SECURE = config('SESSION_COOKIE_SECURE', default=True, cast=bool)
    CSRF_COOKIE_SECURE = config('CSRF_COOKIE_SECURE', default=True, cast=bool)
    
    # Performance settings
    CONN_MAX_AGE = config('DB_CONN_MAX_AGE', default=300, cast=int)
    
    # Optional: log to file in production only if explicitly enabled
    if LOG_TO_FILE:
        LOGGING['handlers']['file'] = {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': '/app/logs/django.log',
        }
        LOGGING['loggers']['django']['handlers'] = ['console', 'file']
        LOGGING['loggers']['telemedicine']['handlers'] = ['console', 'file']
        LOGGING['loggers']['core.ai_features']['handlers'] = ['console', 'file']
    SECURE_HSTS_SECONDS = 31536000
    SECURE_HSTS_INCLUDE_SUBDOMAINS = True
    SECURE_HSTS_PRELOAD = True
    
    # Email settings
    EMAIL_BACKEND = config('EMAIL_BACKEND', default='django.core.mail.backends.console.EmailBackend')
    EMAIL_HOST = config('EMAIL_HOST', default='')
    EMAIL_PORT = config('EMAIL_PORT', default=587, cast=int)
    EMAIL_USE_TLS = config('EMAIL_USE_TLS', default=True, cast=bool)
    EMAIL_HOST_USER = config('EMAIL_HOST_USER', default='')
    EMAIL_HOST_PASSWORD = config('EMAIL_HOST_PASSWORD', default='')
    
    # CORS settings for production
    CORS_ALLOW_ALL_ORIGINS = False
    CORS_ALLOWED_ORIGINS = [
        "http://65.108.91.110",
        "https://65.108.91.110",  # If you add SSL later
    ]

# Channels Configuration for WebRTC
ASGI_APPLICATION = 'laso.asgi.application'

CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            "hosts": [('redis', 6379)] if not DEBUG else [('127.0.0.1', 6379)],
        },
    },
}

# WebRTC Configuration
WEBRTC_CONFIG = {
    'iceServers': [
        {'urls': 'stun:stun.l.google.com:19302'},
        {'urls': 'stun:stun1.l.google.com:19302'},
        {'urls': 'stun:stun2.l.google.com:19302'},
        # Add TURN servers for production:
        # {
        #     'urls': 'turn:your-turn-server.com:3478',
        #     'username': 'your-username',
        #     'credential': 'your-password'
        # }
    ]
}
