# Generated by Django 5.2.1 on 2025-07-01 12:35

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('core', '0003_auto_20250630_1725'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CommunicationNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('appointment', 'Appointment Notification'), ('test_result', 'Test Result Notification'), ('prescription', 'Prescription Notification'), ('message', 'Message Notification'), ('system', 'System Notification')], max_length=20, verbose_name='Notification Type')),
                ('title', models.CharField(max_length=200, verbose_name='Title')),
                ('message', models.TextField(verbose_name='Message')),
                ('related_url', models.CharField(blank=True, max_length=255, null=True, verbose_name='Related URL')),
                ('is_read', models.BooleanField(default=False, verbose_name='Is Read?')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Creation Date')),
            ],
            options={
                'verbose_name': 'Communication Notification',
                'verbose_name_plural': 'Communication Notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DoctorPerformanceMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='Date')),
                ('appointments_count', models.IntegerField(default=0, verbose_name='Appointment Count')),
                ('treatments_count', models.IntegerField(default=0, verbose_name='Treatment Count')),
                ('average_rating', models.FloatField(default=0.0, verbose_name='Average Rating (out of 5)')),
                ('patient_satisfaction', models.FloatField(default=0.0, verbose_name='Patient Satisfaction (out of 100)')),
                ('efficiency_score', models.FloatField(default=0.0, verbose_name='Efficiency Score (out of 100)')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notes')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Creation Date')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Update Date')),
            ],
            options={
                'verbose_name': 'Doctor Performance Metric',
                'verbose_name_plural': 'Doctor Performance Metrics',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='NotificationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('delivery_method', models.CharField(choices=[('web', 'Web'), ('email', 'Email'), ('sms', 'SMS'), ('push', 'Push')], max_length=20, verbose_name='Delivery Method')),
                ('status', models.CharField(choices=[('pending', 'Pending'), ('sent', 'Sent'), ('delivered', 'Delivered'), ('failed', 'Failed'), ('bounced', 'Bounced')], default='pending', max_length=20, verbose_name='Status')),
                ('error_message', models.TextField(blank=True, verbose_name='Error Message')),
                ('sent_at', models.DateTimeField(blank=True, null=True, verbose_name='Date Sent')),
                ('delivered_at', models.DateTimeField(blank=True, null=True, verbose_name='Date Delivered')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Creation Date')),
            ],
            options={
                'verbose_name': 'Notification Log',
                'verbose_name_plural': 'Notification Logs',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='NotificationPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_appointment_reminders', models.BooleanField(default=True, verbose_name='Appointment reminders (Email)')),
                ('email_lab_results', models.BooleanField(default=True, verbose_name='Lab results (Email)')),
                ('email_prescription_ready', models.BooleanField(default=True, verbose_name='Prescription ready (Email)')),
                ('email_system_updates', models.BooleanField(default=False, verbose_name='System updates (Email)')),
                ('sms_appointment_reminders', models.BooleanField(default=False, verbose_name='Appointment reminders (SMS)')),
                ('sms_emergency_alerts', models.BooleanField(default=True, verbose_name='Emergency alerts (SMS)')),
                ('push_notifications', models.BooleanField(default=True, verbose_name='Push notifications')),
                ('appointment_reminder_hours', models.PositiveIntegerField(default=24, verbose_name='Appointment reminder time (hours before)')),
                ('medication_reminder_enabled', models.BooleanField(default=False, verbose_name='Medication reminders active')),
                ('medication_reminder_times', models.JSONField(default=list, help_text='In ["08:00", "12:00", "18:00"] format', verbose_name='Medication reminder times')),
            ],
            options={
                'verbose_name': 'Notification Preference',
                'verbose_name_plural': 'Notification Preferences',
            },
        ),
        migrations.CreateModel(
            name='NotificationTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('appointment_reminder', 'Appointment Reminder'), ('appointment_cancelled', 'Appointment Cancellation'), ('appointment_confirmed', 'Appointment Confirmation'), ('lab_result_ready', 'Lab Result Ready'), ('prescription_ready', 'Prescription Ready'), ('treatment_completed', 'Treatment Completed'), ('medication_reminder', 'Medication Reminder'), ('system_maintenance', 'System Maintenance'), ('doctor_schedule_change', 'Doctor Schedule Change'), ('emergency_alert', 'Emergency Alert')], max_length=30, unique=True, verbose_name='Notification Type')),
                ('title_template', models.CharField(help_text='You can use Django template syntax: {{ variable }}', max_length=200, verbose_name='Title Template')),
                ('message_template', models.TextField(help_text='You can use Django template syntax', verbose_name='Message Template')),
                ('email_template', models.TextField(blank=True, help_text='Custom HTML template for email', verbose_name='Email Template (HTML)')),
                ('sms_template', models.CharField(blank=True, help_text='Short text for SMS (max 160 characters)', max_length=160, verbose_name='SMS Template')),
                ('is_active', models.BooleanField(default=True, verbose_name='Is Active?')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Creation Date')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Update Date')),
            ],
            options={
                'verbose_name': 'Notification Template',
                'verbose_name_plural': 'Notification Templates',
            },
        ),
        migrations.RemoveField(
            model_name='notification',
            name='related_url',
        ),
        migrations.RemoveField(
            model_name='notification',
            name='user',
        ),
        migrations.AddField(
            model_name='notification',
            name='content_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype'),
        ),
        migrations.AddField(
            model_name='notification',
            name='extra_data',
            field=models.JSONField(blank=True, default=dict, verbose_name='Additional Data'),
        ),
        migrations.AddField(
            model_name='notification',
            name='is_sent_via_email',
            field=models.BooleanField(default=False, verbose_name='Sent via email?'),
        ),
        migrations.AddField(
            model_name='notification',
            name='is_sent_via_sms',
            field=models.BooleanField(default=False, verbose_name='Sent via SMS?'),
        ),
        migrations.AddField(
            model_name='notification',
            name='object_id',
            field=models.PositiveIntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='notification',
            name='priority',
            field=models.CharField(choices=[('low', 'Low'), ('normal', 'Normal'), ('high', 'High'), ('urgent', 'Urgent')], default='normal', max_length=10, verbose_name='Priority'),
        ),
        migrations.AddField(
            model_name='notification',
            name='read_at',
            field=models.DateTimeField(blank=True, null=True, verbose_name='Read Date'),
        ),
        migrations.AddField(
            model_name='notification',
            name='recipient',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL, verbose_name='Recipient'),
        ),
        migrations.AddField(
            model_name='notification',
            name='scheduled_for',
            field=models.DateTimeField(blank=True, null=True, verbose_name='Scheduled Sending'),
        ),
        migrations.AddField(
            model_name='notification',
            name='sender',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sent_notifications', to=settings.AUTH_USER_MODEL, verbose_name='Sender'),
        ),
        migrations.AlterField(
            model_name='notification',
            name='notification_type',
            field=models.CharField(choices=[('appointment_reminder', 'Appointment Reminder'), ('appointment_cancelled', 'Appointment Cancellation'), ('appointment_confirmed', 'Appointment Confirmation'), ('lab_result_ready', 'Lab Result Ready'), ('prescription_ready', 'Prescription Ready'), ('treatment_completed', 'Treatment Completed'), ('medication_reminder', 'Medication Reminder'), ('system_maintenance', 'System Maintenance'), ('doctor_schedule_change', 'Doctor Schedule Change'), ('emergency_alert', 'Emergency Alert')], max_length=30, verbose_name='Notification Type'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['recipient', 'is_read'], name='core_notifi_recipie_aeffaf_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['notification_type'], name='core_notifi_notific_cbfe88_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['scheduled_for'], name='core_notifi_schedul_cc624e_idx'),
        ),
        migrations.AddField(
            model_name='communicationnotification',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='communication_notifications', to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AddField(
            model_name='doctorperformancemetric',
            name='doctor',
            field=models.ForeignKey(limit_choices_to={'user_type': 'doctor'}, on_delete=django.db.models.deletion.CASCADE, related_name='performance_metrics', to=settings.AUTH_USER_MODEL, verbose_name='Doctor'),
        ),
        migrations.AddField(
            model_name='notificationlog',
            name='notification',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='core.notification', verbose_name='Notification'),
        ),
        migrations.AddField(
            model_name='notificationpreference',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='notification_preferences', to=settings.AUTH_USER_MODEL, verbose_name='User'),
        ),
        migrations.AlterUniqueTogether(
            name='doctorperformancemetric',
            unique_together={('doctor', 'date')},
        ),
    ]
