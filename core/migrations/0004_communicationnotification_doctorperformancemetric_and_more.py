# Generated by Django 5.2.1 on 2025-07-01 12:35

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('core', '0003_auto_20250630_1725'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='CommunicationNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('appointment', 'Randevu Bildirimi'), ('test_result', 'Test Sonucu Bildirimi'), ('prescription', 'Reçete Bildirimi'), ('message', 'Mesaj Bildirimi'), ('system', 'Sistem Bildirimi')], max_length=20, verbose_name='Bildirim Tipi')),
                ('title', models.CharField(max_length=200, verbose_name='Başlık')),
                ('message', models.TextField(verbose_name='Mesaj')),
                ('related_url', models.CharField(blank=True, max_length=255, null=True, verbose_name='İlgili URL')),
                ('is_read', models.BooleanField(default=False, verbose_name='Okundu mu?')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Oluşturulma Tarihi')),
            ],
            options={
                'verbose_name': 'İletişim Bildirimi',
                'verbose_name_plural': 'İletişim Bildirimleri',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DoctorPerformanceMetric',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(verbose_name='Tarih')),
                ('appointments_count', models.IntegerField(default=0, verbose_name='Randevu Sayısı')),
                ('treatments_count', models.IntegerField(default=0, verbose_name='Tedavi Sayısı')),
                ('average_rating', models.FloatField(default=0.0, verbose_name='Ortalama Değerlendirme (5 üzerinden)')),
                ('patient_satisfaction', models.FloatField(default=0.0, verbose_name='Hasta Memnuniyeti (100 üzerinden)')),
                ('efficiency_score', models.FloatField(default=0.0, verbose_name='Verimlilik Puanı (100 üzerinden)')),
                ('notes', models.TextField(blank=True, null=True, verbose_name='Notlar')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Oluşturulma Tarihi')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Güncellenme Tarihi')),
            ],
            options={
                'verbose_name': 'Doktor Performans Metriği',
                'verbose_name_plural': 'Doktor Performans Metrikleri',
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='NotificationLog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('delivery_method', models.CharField(choices=[('web', 'Web'), ('email', 'E-posta'), ('sms', 'SMS'), ('push', 'Push')], max_length=20, verbose_name='Gönderim Yöntemi')),
                ('status', models.CharField(choices=[('pending', 'Beklemede'), ('sent', 'Gönderildi'), ('delivered', 'Teslim Edildi'), ('failed', 'Başarısız'), ('bounced', 'Geri Döndü')], default='pending', max_length=20, verbose_name='Durum')),
                ('error_message', models.TextField(blank=True, verbose_name='Hata Mesajı')),
                ('sent_at', models.DateTimeField(blank=True, null=True, verbose_name='Gönderilme Tarihi')),
                ('delivered_at', models.DateTimeField(blank=True, null=True, verbose_name='Teslim Edilme Tarihi')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Oluşturulma Tarihi')),
            ],
            options={
                'verbose_name': 'Bildirim Logu',
                'verbose_name_plural': 'Bildirim Logları',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='NotificationPreference',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('email_appointment_reminders', models.BooleanField(default=True, verbose_name='Randevu hatırlatmaları (E-posta)')),
                ('email_lab_results', models.BooleanField(default=True, verbose_name='Lab sonuçları (E-posta)')),
                ('email_prescription_ready', models.BooleanField(default=True, verbose_name='Reçete hazır (E-posta)')),
                ('email_system_updates', models.BooleanField(default=False, verbose_name='Sistem güncellemeleri (E-posta)')),
                ('sms_appointment_reminders', models.BooleanField(default=False, verbose_name='Randevu hatırlatmaları (SMS)')),
                ('sms_emergency_alerts', models.BooleanField(default=True, verbose_name='Acil durum uyarıları (SMS)')),
                ('push_notifications', models.BooleanField(default=True, verbose_name='Push bildirimleri')),
                ('appointment_reminder_hours', models.PositiveIntegerField(default=24, verbose_name='Randevu hatırlatma saati (saat önce)')),
                ('medication_reminder_enabled', models.BooleanField(default=False, verbose_name='İlaç hatırlatmaları aktif')),
                ('medication_reminder_times', models.JSONField(default=list, help_text='["08:00", "12:00", "18:00"] formatında', verbose_name='İlaç hatırlatma saatleri')),
            ],
            options={
                'verbose_name': 'Bildirim Tercihi',
                'verbose_name_plural': 'Bildirim Tercihleri',
            },
        ),
        migrations.CreateModel(
            name='NotificationTemplate',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notification_type', models.CharField(choices=[('appointment_reminder', 'Randevu Hatırlatması'), ('appointment_cancelled', 'Randevu İptali'), ('appointment_confirmed', 'Randevu Onayı'), ('lab_result_ready', 'Lab Sonucu Hazır'), ('prescription_ready', 'Reçete Hazır'), ('treatment_completed', 'Tedavi Tamamlandı'), ('medication_reminder', 'İlaç Hatırlatması'), ('system_maintenance', 'Sistem Bakımı'), ('doctor_schedule_change', 'Doktor Program Değişikliği'), ('emergency_alert', 'Acil Durum Uyarısı')], max_length=30, unique=True, verbose_name='Bildirim Türü')),
                ('title_template', models.CharField(help_text='Django template syntax kullanabilirsiniz: {{ variable }}', max_length=200, verbose_name='Başlık Şablonu')),
                ('message_template', models.TextField(help_text='Django template syntax kullanabilirsiniz', verbose_name='Mesaj Şablonu')),
                ('email_template', models.TextField(blank=True, help_text='E-posta için özel HTML şablon', verbose_name='E-posta Şablonu (HTML)')),
                ('sms_template', models.CharField(blank=True, help_text='SMS için kısa metin (160 karakter max)', max_length=160, verbose_name='SMS Şablonu')),
                ('is_active', models.BooleanField(default=True, verbose_name='Aktif mi?')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Oluşturulma Tarihi')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Güncellenme Tarihi')),
            ],
            options={
                'verbose_name': 'Bildirim Şablonu',
                'verbose_name_plural': 'Bildirim Şablonları',
            },
        ),
        migrations.RemoveField(
            model_name='notification',
            name='related_url',
        ),
        migrations.RemoveField(
            model_name='notification',
            name='user',
        ),
        migrations.AddField(
            model_name='notification',
            name='content_type',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype'),
        ),
        migrations.AddField(
            model_name='notification',
            name='extra_data',
            field=models.JSONField(blank=True, default=dict, verbose_name='Ek Veriler'),
        ),
        migrations.AddField(
            model_name='notification',
            name='is_sent_via_email',
            field=models.BooleanField(default=False, verbose_name='E-posta ile gönderildi mi?'),
        ),
        migrations.AddField(
            model_name='notification',
            name='is_sent_via_sms',
            field=models.BooleanField(default=False, verbose_name='SMS ile gönderildi mi?'),
        ),
        migrations.AddField(
            model_name='notification',
            name='object_id',
            field=models.PositiveIntegerField(blank=True, null=True),
        ),
        migrations.AddField(
            model_name='notification',
            name='priority',
            field=models.CharField(choices=[('low', 'Düşük'), ('normal', 'Normal'), ('high', 'Yüksek'), ('urgent', 'Acil')], default='normal', max_length=10, verbose_name='Öncelik'),
        ),
        migrations.AddField(
            model_name='notification',
            name='read_at',
            field=models.DateTimeField(blank=True, null=True, verbose_name='Okunma Tarihi'),
        ),
        migrations.AddField(
            model_name='notification',
            name='recipient',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='notifications', to=settings.AUTH_USER_MODEL, verbose_name='Alıcı'),
        ),
        migrations.AddField(
            model_name='notification',
            name='scheduled_for',
            field=models.DateTimeField(blank=True, null=True, verbose_name='Zamanlanmış Gönderim'),
        ),
        migrations.AddField(
            model_name='notification',
            name='sender',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sent_notifications', to=settings.AUTH_USER_MODEL, verbose_name='Gönderen'),
        ),
        migrations.AlterField(
            model_name='notification',
            name='notification_type',
            field=models.CharField(choices=[('appointment_reminder', 'Randevu Hatırlatması'), ('appointment_cancelled', 'Randevu İptali'), ('appointment_confirmed', 'Randevu Onayı'), ('lab_result_ready', 'Lab Sonucu Hazır'), ('prescription_ready', 'Reçete Hazır'), ('treatment_completed', 'Tedavi Tamamlandı'), ('medication_reminder', 'İlaç Hatırlatması'), ('system_maintenance', 'Sistem Bakımı'), ('doctor_schedule_change', 'Doktor Program Değişikliği'), ('emergency_alert', 'Acil Durum Uyarısı')], max_length=30, verbose_name='Bildirim Türü'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['recipient', 'is_read'], name='core_notifi_recipie_aeffaf_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['notification_type'], name='core_notifi_notific_cbfe88_idx'),
        ),
        migrations.AddIndex(
            model_name='notification',
            index=models.Index(fields=['scheduled_for'], name='core_notifi_schedul_cc624e_idx'),
        ),
        migrations.AddField(
            model_name='communicationnotification',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='communication_notifications', to=settings.AUTH_USER_MODEL, verbose_name='Kullanıcı'),
        ),
        migrations.AddField(
            model_name='doctorperformancemetric',
            name='doctor',
            field=models.ForeignKey(limit_choices_to={'user_type': 'doctor'}, on_delete=django.db.models.deletion.CASCADE, related_name='performance_metrics', to=settings.AUTH_USER_MODEL, verbose_name='Doktor'),
        ),
        migrations.AddField(
            model_name='notificationlog',
            name='notification',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='logs', to='core.notification', verbose_name='Bildirim'),
        ),
        migrations.AddField(
            model_name='notificationpreference',
            name='user',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='notification_preferences', to=settings.AUTH_USER_MODEL, verbose_name='Kullanıcı'),
        ),
        migrations.AlterUniqueTogether(
            name='doctorperformancemetric',
            unique_together={('doctor', 'date')},
        ),
    ]
