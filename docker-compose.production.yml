services:
  # PostgreSQL Database
  db:
    image: postgres:17-alpine
    container_name: laso_postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-laso_healthcare}
      POSTGRES_USER: ${POSTGRES_USER:-laso_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-laso2403}
    volumes:
      - postgres_data:/var/lib/postgresql/data/
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "127.0.0.1:5432:5432"  # Only bind to localhost for security
    networks:
      - laso_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U laso_user -d laso_healthcare"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache & Session Store
  redis:
    image: redis:7-alpine
    container_name: laso_redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-laso2403}
    volumes:
      - redis_data:/data
    ports:
      - "127.0.0.1:6379:6379"  # Only bind to localhost for security
    networks:
      - laso_network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Django Web Application
  web:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: laso_web
    restart: unless-stopped
    environment:
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY}
      - ALLOWED_HOSTS=${ALLOWED_HOSTS:-65.108.91.110,localhost,127.0.0.1}
      - USE_SQLITE=${USE_SQLITE:-False}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-laso_user}:${POSTGRES_PASSWORD:-laso2403}@db:5432/${POSTGRES_DB:-laso_healthcare}
      - LOG_TO_FILE=${LOG_TO_FILE:-True}
      - EMAIL_BACKEND=${EMAIL_BACKEND}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT:-587}
      - EMAIL_HOST_USER=${EMAIL_HOST_USER}
      - EMAIL_HOST_PASSWORD=${EMAIL_HOST_PASSWORD}
      - EMAIL_USE_TLS=${EMAIL_USE_TLS:-True}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-laso2403}@redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY}
    volumes:
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - logs_volume:/app/logs
    expose:
      - "8000"  # Only expose to internal network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - laso_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/liveness/"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s

  # Celery Worker for Background Tasks
  celery:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: laso_celery
    restart: unless-stopped
    command: celery -A laso worker -l info
    environment:
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY}
      - USE_SQLITE=${USE_SQLITE:-False}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-laso_user}:${POSTGRES_PASSWORD:-laso2403}@db:5432/${POSTGRES_DB:-laso_healthcare}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-laso2403}@redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - HUGGINGFACE_API_KEY=${HUGGINGFACE_API_KEY}
    volumes:
      - media_volume:/app/media
      - logs_volume:/app/logs
    depends_on:
      - db
      - redis
      - web
    networks:
      - laso_network

  # Celery Beat for Scheduled Tasks
  celery-beat:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    container_name: laso_celery_beat
    restart: unless-stopped
    command: celery -A laso beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler --pidfile=/tmp/celerybeat.pid
    environment:
      - DEBUG=${DEBUG:-False}
      - SECRET_KEY=${SECRET_KEY}
      - USE_SQLITE=${USE_SQLITE:-False}
      - DATABASE_URL=postgresql://${POSTGRES_USER:-laso_user}:${POSTGRES_PASSWORD:-laso2403}@db:5432/${POSTGRES_DB:-laso_healthcare}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-laso2403}@redis:6379/0
    volumes:
      - logs_volume:/app/logs
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      web:
        condition: service_healthy
    networks:
      - laso_network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: laso_nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - static_volume:/var/www/static:ro
      - media_volume:/var/www/media:ro
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
    networks:
      - laso_network

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  logs_volume:
    driver: local

networks:
  laso_network:
    driver: bridge